
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { 
  Lightbulb, 
  ArrowRight, 
  ArrowLeft, 
  CheckCircle, 
  Target, 
  Users, 
  DollarSign,
  Zap,
  Play
} from 'lucide-react';

interface BuilderOnboardingProps {
  currentLanguage: 'ko' | 'en';
  onComplete: () => void;
}

const BuilderOnboarding: React.FC<BuilderOnboardingProps> = ({
  currentLanguage,
  onComplete
}) => {
  const [currentStep, setCurrentStep] = useState(0);

  const text = {
    ko: {
      title: 'üöÄ ÏïÑÏù¥ÎîîÏñ¥ ÎπåÎçî Í∞ÄÏù¥Îìú',
      subtitle: 'Î™®ÎìàÌôîÎêú ÏïÑÏù¥ÎîîÏñ¥ ÏûëÏÑ±Î≤ïÏùÑ Î∞∞ÏõåÎ≥¥ÏÑ∏Ïöî',
      steps: [
        {
          title: 'Î™®ÎìàÌôî ÏïÑÏù¥ÎîîÏñ¥ÎûÄ?',
          content: 'ÏïÑÏù¥ÎîîÏñ¥Î•º 12Í∞úÏùò ÌïµÏã¨ ÏöîÏÜåÎ°ú ÎÇòÎàÑÏñ¥ Ï≤¥Í≥ÑÏ†ÅÏúºÎ°ú Íµ¨ÏÑ±ÌïòÎäî Î∞©Î≤ïÏûÖÎãàÎã§.',
          icon: Lightbulb,
          examples: [
            'Î¨∏Ï†úÏ†ê: Í∏∞Ï°¥ ÏÜîÎ£®ÏÖòÏùò ÌïúÍ≥Ñ',
            'ÏÜîÎ£®ÏÖò: ÌòÅÏã†Ï†ÅÏù∏ Ìï¥Í≤∞Ï±Ö',
            'ÌÉÄÍ≤ü Í≥†Í∞ù: Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÇ¨Ïö©ÏûêÏ∏µ'
          ]
        },
        {
          title: 'Ï¢ãÏùÄ Î™®Îìà ÏûëÏÑ±Î≤ï',
          content: 'Í∞Å Î™®ÎìàÏùÄ Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ï∏°Ï†ï Í∞ÄÎä•ÌïòÎ©∞ Ïã§Ìñâ Í∞ÄÎä•Ìï¥Ïïº Ìï©ÎãàÎã§.',
          icon: Target,
          examples: [
            '‚ùå "Ï¢ãÏùÄ Ïï± ÎßåÎì§Í∏∞"',
            '‚úÖ "20-30ÎåÄ ÏßÅÏû•Ïù∏ÏùÑ ÏúÑÌïú 5Î∂Ñ Î™ÖÏÉÅ Ïï±"',
            '‚úÖ "Ïõî Íµ¨ÎèÖÎ£å 9,900Ïõê ÌîÑÎ¶¨ÎØ∏ÏóÑ Î™®Îç∏"'
          ]
        },
        {
          title: 'AI ÏûêÎèô Î∂ÑÌï¥ ÌôúÏö©',
          content: 'ÏûêÏú†Î°≠Í≤å ÏûëÏÑ±Ìïú ÏïÑÏù¥ÎîîÏñ¥Î•º AIÍ∞Ä ÏûêÎèôÏúºÎ°ú 12Í∞ú Î™®ÎìàÎ°ú Î∂ÑÌï¥Ìï¥ÎìúÎ¶ΩÎãàÎã§.',
          icon: Zap,
          examples: [
            '1. ÏïÑÏù¥ÎîîÏñ¥Î•º ÏûêÏú†Î°≠Í≤å ÏûÖÎ†•',
            '2. AIÍ∞Ä ÏûêÎèôÏúºÎ°ú Î™®Îìà Î∂ÑÏÑù',
            '3. Í∞Å Î™®ÎìàÏùÑ ÏàòÏ†ïÌïòÍ≥† Í∞úÏÑ†'
          ]
        },
        {
          title: 'ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!',
          content: 'Ïù¥Ï†ú Ï≤´ Î≤àÏß∏ Î™®ÎìàÌôî ÏïÑÏù¥ÎîîÏñ¥Î•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.',
          icon: Play,
          examples: [
            'üí° ÏûêÏú† ÏûÖÎ†• ‚Üí AI Î∂ÑÌï¥',
            'üîß Î™®Îìà Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏÑ†ÌÉù',
            'üìä ÏôÑÏÑ±Îêú ÏïÑÏù¥ÎîîÏñ¥ Î∂ÑÏÑù'
          ]
        }
      ],
      navigation: {
        next: 'Îã§Ïùå',
        previous: 'Ïù¥Ï†Ñ',
        start: 'ÏãúÏûëÌïòÍ∏∞',
        skip: 'Í±¥ÎÑàÎõ∞Í∏∞'
      }
    },
    en: {
      title: 'üöÄ Idea Builder Guide',
      subtitle: 'Learn how to create modular ideas',
      steps: [
        {
          title: 'What are Modular Ideas?',
          content: 'A method to systematically organize ideas into 12 core business elements.',
          icon: Lightbulb,
          examples: [
            'Problem: Current solution limitations',
            'Solution: Innovative approach',
            'Target Customer: Specific user segment'
          ]
        },
        {
          title: 'Writing Good Modules',
          content: 'Each module should be specific, measurable, and actionable.',
          icon: Target,
          examples: [
            '‚ùå "Make good app"',
            '‚úÖ "5-minute meditation app for office workers in 20s-30s"',
            '‚úÖ "Premium subscription model at $9.99/month"'
          ]
        },
        {
          title: 'AI Auto-Decomposition',
          content: 'AI automatically breaks down your free-form ideas into 12 structured modules.',
          icon: Zap,
          examples: [
            '1. Input your idea freely',
            '2. AI analyzes and decomposes',
            '3. Edit and improve each module'
          ]
        },
        {
          title: 'Get Started!',
          content: 'Now create your first modular idea.',
          icon: Play,
          examples: [
            'üí° Free input ‚Üí AI decomposition',
            'üîß Select from module browser',
            'üìä Analyze completed idea'
          ]
        }
      ],
      navigation: {
        next: 'Next',
        previous: 'Previous',
        start: 'Get Started',
        skip: 'Skip'
      }
    }
  };

  const currentStepData = text[currentLanguage].steps[currentStep];
  const isLastStep = currentStep === text[currentLanguage].steps.length - 1;

  const handleNext = () => {
    if (isLastStep) {
      onComplete();
    } else {
      setCurrentStep(prev => prev + 1);
    }
  };

  const handlePrevious = () => {
    setCurrentStep(prev => Math.max(0, prev - 1));
  };

  return (
    <Dialog open={true} onOpenChange={() => onComplete()}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="text-center text-2xl font-bold">
            {text[currentLanguage].title}
          </DialogTitle>
          <p className="text-center text-gray-600">
            {text[currentLanguage].subtitle}
          </p>
        </DialogHeader>

        <div className="space-y-6">
          {/* Progress Bar */}
          <div className="flex items-center space-x-2">
            {text[currentLanguage].steps.map((_, index) => (
              <div
                key={index}
                className={`flex-1 h-2 rounded-full ${
                  index <= currentStep ? 'bg-purple-500' : 'bg-gray-200'
                }`}
              />
            ))}
          </div>

          {/* Current Step Content */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-3">
                <div className="p-2 bg-purple-100 rounded-lg">
                  <currentStepData.icon className="w-6 h-6 text-purple-600" />
                </div>
                <span>{currentStepData.title}</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <p className="text-gray-700 leading-relaxed">
                {currentStepData.content}
              </p>
              
              <div className="space-y-2">
                {currentStepData.examples.map((example, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    {example.includes('‚ùå') || example.includes('‚úÖ') ? (
                      <Badge 
                        variant={example.includes('‚úÖ') ? 'default' : 'destructive'}
                        className="text-xs"
                      >
                        {example}
                      </Badge>
                    ) : (
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-purple-400 rounded-full" />
                        <span className="text-sm text-gray-600">{example}</span>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Navigation */}
          <div className="flex justify-between items-center">
            <Button
              variant="outline"
              onClick={handlePrevious}
              disabled={currentStep === 0}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              {text[currentLanguage].navigation.previous}
            </Button>

            <div className="flex space-x-2">
              <Button variant="ghost" onClick={onComplete}>
                {text[currentLanguage].navigation.skip}
              </Button>
              <Button onClick={handleNext}>
                {isLastStep ? text[currentLanguage].navigation.start : text[currentLanguage].navigation.next}
                {!isLastStep && <ArrowRight className="w-4 h-4 ml-2" />}
                {isLastStep && <Play className="w-4 h-4 ml-2" />}
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default BuilderOnboarding;
