
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Lightbulb, ArrowRight, HelpCircle, Heart, Star } from 'lucide-react';
import { IdeaQuality } from './IdeaQualityAnalyzer';

interface IdeaExpansionHelperProps {
  currentLanguage: 'ko' | 'en';
  originalIdea: string;
  qualityAnalysis: IdeaQuality;
  onExpansionComplete: (expandedIdea: string) => void;
  onSkip: () => void;
}

const IdeaExpansionHelper: React.FC<IdeaExpansionHelperProps> = ({
  currentLanguage,
  originalIdea,
  qualityAnalysis,
  onExpansionComplete,
  onSkip
}) => {
  const [expandedIdea, setExpandedIdea] = useState(originalIdea);
  
  const text = {
    ko: {
      title: 'üí´ Ìï®Íªò ÏïÑÏù¥ÎîîÏñ¥Î•º Îçî ÎπõÎÇòÍ≤å ÎßåÎì§Ïñ¥Î≥ºÍπåÏöî?',
      subtitle: 'Ïù¥ÎØ∏ Ï¢ãÏùÄ ÏãúÏûëÏù¥ÏóêÏöî! Ï°∞Í∏àÎßå Îçî Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÎßåÎì§Ïñ¥Î≥¥Í≤†ÏäµÎãàÎã§',
      currentScore: 'ÌòÑÏû¨ ÏôÑÏÑ±ÎèÑ',
      strengths: 'üëç Ïù¥ÎØ∏ Ï¢ãÏùÄ Ï†êÎì§',
      suggestions: '‚ú® Îçî Î∞úÏ†ÑÏãúÌÇ¨ Ïàò ÏûàÎäî Î∂ÄÎ∂Ñ',
      expandButton: 'Îçî Î∞úÏ†ÑÏãúÏºúÏÑú ÏßÑÌñâÌïòÍ∏∞',
      skipButton: 'Ïù¥ÎåÄÎ°úÎèÑ Ï∂©Î∂ÑÌï¥Ïöî',
      encouragement: 'Ï∞ΩÏùòÏ†ÅÏù∏ ÏïÑÏù¥ÎîîÏñ¥ÎÑ§Ïöî! üëè',
      helpQuestions: [
        'Ïù¥ ÏïÑÏù¥ÎîîÏñ¥Î°ú Ïñ¥Îñ§ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÎ†§Í≥† ÌïòÎÇòÏöî?',
        'ÎàÑÍ∞Ä Ïù¥Í≤ÉÏùÑ ÌïÑÏöîÎ°ú Ìï†ÍπåÏöî?',
        'Í∏∞Ï°¥ÏóêÎäî Ïñ¥ÎñªÍ≤å Ìï¥Í≤∞ÌïòÍ≥† ÏûàÎÇòÏöî?',
        'Ïôú ÏßÄÍ∏à Ïù¥ ÏïÑÏù¥ÎîîÏñ¥Í∞Ä ÌïÑÏöîÌïúÍ∞ÄÏöî?'
      ]
    },
    en: {
      title: 'üí´ Let\'s make your idea shine even brighter!',
      subtitle: 'Great start! Let\'s make it a bit more specific together',
      currentScore: 'Current Completion',
      strengths: 'üëç Already great aspects',
      suggestions: '‚ú® Areas we can enhance',
      expandButton: 'Let\'s enhance it further',
      skipButton: 'This is good enough',
      encouragement: 'Creative idea! üëè',
      helpQuestions: [
        'What problem does this idea solve?',
        'Who would need this?',
        'How is this currently being solved?',
        'Why is this idea needed now?'
      ]
    }
  };

  // Focus on positive aspects first
  const getPositiveAspects = () => {
    const aspects = [];
    if (originalIdea.length > 20) aspects.push(currentLanguage === 'ko' ? 'Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÑ§Î™Ö' : 'Detailed description');
    if (originalIdea.includes('Î¨∏Ï†ú') || originalIdea.includes('problem')) aspects.push(currentLanguage === 'ko' ? 'Î¨∏Ï†ú Ïù∏Ïãù' : 'Problem awareness');
    if (originalIdea.includes('ÏÇ¨Ïö©Ïûê') || originalIdea.includes('user')) aspects.push(currentLanguage === 'ko' ? 'ÏÇ¨Ïö©Ïûê Í≥†Î†§' : 'User consideration');
    if (aspects.length === 0) aspects.push(currentLanguage === 'ko' ? 'Ï∞ΩÏùòÏ†Å Ï†ëÍ∑º' : 'Creative approach');
    return aspects;
  };

  // Convert harsh issues to gentle suggestions
  const getGentleSuggestions = () => {
    const suggestions = [];
    if (qualityAnalysis.score < 50) {
      suggestions.push(currentLanguage === 'ko' ? 
        'Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÑ§Î™ÖÏùÑ Ï∂îÍ∞ÄÌïòÎ©¥ Îçî Ï¢ãÏùÑ Í±∞ÏòàÏöî' : 
        'Adding more specific details would be great');
    }
    if (qualityAnalysis.specificityScore < 40) {
      suggestions.push(currentLanguage === 'ko' ? 
        'ÌÉÄÍ≤ü Í≥†Í∞ùÏù¥ÎÇò Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÉÅÌô©ÏùÑ Ïñ∏Í∏âÌï¥Î≥¥ÏÑ∏Ïöî' : 
        'Try mentioning target customers or specific situations');
    }
    return suggestions;
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Encouraging Header */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center space-x-2 text-2xl">
          <Heart className="w-6 h-6 text-pink-500" />
          <span>{text[currentLanguage].encouragement}</span>
        </div>
        <h2 className="text-3xl font-bold text-gray-900 flex items-center justify-center space-x-2">
          <Lightbulb className="w-8 h-8 text-yellow-500" />
          <span>{text[currentLanguage].title}</span>
        </h2>
        <p className="text-lg text-gray-600">{text[currentLanguage].subtitle}</p>
      </div>

      {/* Positive Quality Analysis */}
      <Card className="border-2 border-green-200 bg-green-50">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg flex items-center space-x-2">
              <Star className="w-5 h-5 text-yellow-500" />
              <span>{text[currentLanguage].currentScore}</span>
            </CardTitle>
            <Badge className="bg-green-100 text-green-800">
              {qualityAnalysis.score}/100
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Positive Aspects First */}
          <div>
            <h4 className="font-semibold text-green-600 mb-2">{text[currentLanguage].strengths}</h4>
            <div className="flex flex-wrap gap-2">
              {getPositiveAspects().map((aspect, index) => (
                <Badge key={index} variant="secondary" className="bg-green-100 text-green-700">
                  {aspect}
                </Badge>
              ))}
            </div>
          </div>
          
          {/* Gentle Suggestions */}
          {getGentleSuggestions().length > 0 && (
            <div>
              <h4 className="font-semibold text-blue-600 mb-2">{text[currentLanguage].suggestions}</h4>
              <ul className="list-disc list-inside space-y-1">
                {getGentleSuggestions().map((suggestion, index) => (
                  <li key={index} className="text-sm text-blue-600">{suggestion}</li>
                ))}
              </ul>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Helpful Questions */}
      <Card className="border-purple-200 bg-purple-50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-purple-700">
            <HelpCircle className="w-5 h-5" />
            <span>Ïù¥Îü∞ ÏßàÎ¨∏Îì§ÏùÑ ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-2">
            {text[currentLanguage].helpQuestions.map((question, index) => (
              <div key={index} className="bg-white p-3 rounded-lg border border-purple-200">
                <p className="text-sm text-purple-700">{question}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Expansion Input */}
      <Card>
        <CardContent className="p-6 space-y-4">
          <Textarea
            value={expandedIdea}
            onChange={(e) => setExpandedIdea(e.target.value)}
            placeholder={currentLanguage === 'ko' ? 
              'ÏûêÏú†Î°≠Í≤å ÏÉùÍ∞ÅÎÇòÎäî ÎåÄÎ°ú Ï†ÅÏñ¥Î≥¥ÏÑ∏Ïöî... ÏôÑÎ≤ΩÌïòÏßÄ ÏïäÏïÑÎèÑ Í¥úÏ∞ÆÏïÑÏöî!' :
              'Feel free to write whatever comes to mind... It doesn\'t have to be perfect!'
            }
            className="min-h-[120px] text-lg resize-none"
            maxLength={500}
          />
          
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-500">
              {expandedIdea.length}/500
            </div>
            <div className="flex space-x-3">
              <Button
                variant="outline"
                onClick={onSkip}
                className="border-gray-300 text-gray-600 hover: bg-gray-50"
              >
                {text[currentLanguage].skipButton}
              </Button>
              <Button
                onClick={() => onExpansionComplete(expandedIdea)}
                disabled={expandedIdea.trim().length < 10}
                className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
              >
                {text[currentLanguage].expandButton}
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default IdeaExpansionHelper;
